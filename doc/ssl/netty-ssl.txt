JDK版本

第一步：生成Netty服务端私钥和证书仓库命令
keytool -genkey -alias ssl-game-framework -keysize 2048 -validity 365 -keyalg RSA -dname "CN=localhost" -keypass ssl-game-framework -storepass ssl-game-framework -keystore gameFrameworkServer.jks

第二步：生成Netty服务端自签名证书
keytool -export -alias ssl-game-framework -keystore gameFrameworkServer.jks -storepass ssl-game-framework -file gameFrameworkServer.cer

第三步：生成客户端的密钥对和证书仓库，用于将服务端的证书保存到客户端的授信证书仓库中
keytool -genkey -alias ssl-game-framework-c -keysize 2048 -validity 365  -keyalg RSA -dname "CN=localhost" -keypass ssl-game-framework  -storepass ssl-game-framework -keystore gameFrameworkClient.jks

第四步：将Netty服务端证书导入到客户端的证书仓库中
keytool -import -trustcacerts -alias ssl-game-framework -file gameFrameworkServer.cer -storepass ssl-game-framework -keystore gameFrameworkClient.jks

如果你只做单向认证，则到此就可以结束了，如果是双向认证，则还需继续往下走

第五步:生成客户端自签名证书
keytool -export -alias ssl-game-framework-c -keystore gameFrameworkClient.jks -storepass ssl-game-framework -file gameFrameworkClient.cer

最后一步:将客户端的自签名证书导入到服务端的信任证书仓库中：
keytool -import -trustcacerts -alias ssl-game-framework-c -file gameFrameworkClient.cer -storepass ssl-game-framework -keystore gameFrameworkServer.jks


客户端websocket配合Nginx使用(单向)

第一步：将.jks文件转为.p12(PKCS12格式证书库)
keytool -importkeystore -srckeystore gameFrameworkServer.jks -destkeystore gameFrameworkServer-pkcs12.p12 -deststoretype PKCS12
查看新格式(pkcs12)证书库
keytool -deststoretype PKCS12 -keystore gameFrameworkServer-pkcs12.p12 -list
第二步 将cer格式证书转pem格式（openssl 下载地址：http://slproweb.com/products/Win32OpenSSL.html）
openssl x509 -inform der -in gameFrameworkServer.cer -out gameFrameworkServer-pem.pem
第三步 提取私钥
openssl pkcs12 -nocerts -nodes -in gameFrameworkServer-pkcs12.p12 -out gameFrameworkServer.key

nginx.conf
 server {
        listen       443 ssl;
        ssl on;
        server_name  192.168.11.65:8088;

        ssl_certificate      F:/My-WorkSpace/game-framework-springboot/doc/ssl/gameFrameworkServer-pem.pem;
        ssl_certificate_key  F:/My-WorkSpace/game-framework-springboot/doc/ssl/gameFrameworkServer.key;

        ssl_session_timeout 1m;
        ssl_protocols SSLv2 SSLv3 TLSv1.2;
        ssl_ciphers     ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256:AES128-SHA:AES256-SHA:RC4-SHA:DES-CBC3-SHA:RC4-MD5;
        ssl_prefer_server_ciphers   on;
        location / {
            proxy_set_header Host $host;
            proxy_set_header Upgrade $http_upgrade;    #支持wss
            proxy_set_header Connection "upgrade";    #支持wss
            proxy_pass 192.168.11.65:8088;
        }
    }

